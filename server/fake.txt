const User = require("../models/user");
const jwt = require("jsonwebtoken");

exports.auth = async (req, res, next) => {
  try {
    let token = req?.headers?.authorization?.replace("Bearer ", "");
    if (!token) {
      return res.status(401).json({
        success: false,
        message: "Please login at first!",
      });
    }
    const decodedData = jwt.verify(token, process.env.JWT_SECRET);

    const user = await User.findById(decodedData.id);

    if (!user) {
      return res.status(404).json({
        success: false,
        message: "User not found!",
      });
    }
    req.user = user;
    next();
  } catch (error) {
    if (error.name === "TokenExpiredError") {
      return res.status(401).json({
        success: false,
        message: "Token expired!",
      });
    } else {
      return res.status(500).json({
        success: false,
        message: error.message,
      });
    }
  }
};

//for admin
exports.isAuthAdmin = (req, res, next) => {
  if (!req.user) {
    return res.status(401).json({
      success: false,
      message: "You must be authenticated to access this resource",
    });
  }

  if (req.user.role !== "admin") {
    return res.status(403).json({
      success: false,
      message: `You are not authorized to access this resource (${req.method} ${req.originalUrl})`,
    });
  }

  next();
};

//error handler
const ErrorHandler = require("../utils/errorHandler");

module.exports = (err, req, res, next) => {
  err.statusCode = err.statusCode || 500;
  err.message = err.message || "Internal Server Error";

  //wrong Mongodb Id error

  if (err.name === "CastError") {
    const message = `Resource not found:${err.path}`;
    err = new ErrorHandler(message, 400);
  }

  // Mongoose duplicate keys error

  if (err.code === 11000) {
    const message = `Duplicate ${Object.keys(err.keyValue)} Entered`;
    err = new ErrorHandler(message, 400);
  }

  // Wrong JWT error
  if (err.name === "JsonWebTokenError") {
    const message = `Json web Token is Invalid, try again`;
    err = new ErrorHandler(message, 400);
  }

  // JWT EXPIRE ERROR

  if (err.name === "TokenExpiredError") {
    const message = `Json web Token is Expired, Try again`;
    err = new ErrorHandler(message, 400);
  }

  res.status(err.statusCode).json({
    success: false,
    message: err.message,
  });
};


//for apifeatures
class ApiFeatures {
  constructor(query, queryStr) {
    this.query = query;
    this.queryStr = queryStr;
  }

  search() {
    const keyword = this.queryStr.keyword
      ? {
          productName: {
            $regex: this.queryStr.keyword,
            $options: "i",
          },
        }
      : {};

    this.query = this.query.find({ ...keyword });
    return this;
  }

  //filter
  filter() {
    const queryCopy = { ...this.queryStr };

    //removing some fileds for category
    const removeFileds = ["keyword", "page", "limit"];
    removeFileds.forEach((key) => delete queryCopy[key]);

    //filter for Price and Rating

    let queryStr = JSON.stringify(queryCopy);
    queryStr = queryStr.replace(/\b(gt|gte|lt|lte)\b/g, (key) => `$${key}`);
    this.query = this.query.find(JSON.parse(queryStr));

    return this;
  }

  //for pagination
  pagination(resultPerPage) {
    const currentPage = Number(this.queryStr.page) || 1;

    const skip = resultPerPage * (currentPage - 1);

    this.query = this.query.limit(resultPerPage).skip(skip);
    return this;
  }

   // sorting functionality
  sort() {
    if (this.queryStr.sortBy) {
      const sortBy = this.queryStr.sortBy.split(",").join(" ");
      this.query = this.query.sort(sortBy);
    } else {
      this.query = this.query.sort("-createdAt"); // default sorting
    }
    return this;
  }
}

module.exports = ApiFeatures;


//By using configureStore from Redux Toolkit, you can create a Redux store 
instance with sensible defaults and with 
preconfigured middleware, including devtools, thunk, and immutability checks.


In the createAsyncThunk function, the first argument is a string that defines
 the name of the thunk action, and the second argument is an async function that returns a Promise.

In the provided example, the getProducts thunk action is defined with
 the name "product/getProducts", and the second argument is an async
  function that receives two parameters: __ and rejectWithValue.

The double underscore (__) is a convention used in JavaScript to
 indicate that a function parameter is not used or is ignored. In
  this case, the __ parameter is not used, but it's required because 
  the createAsyncThunk function expects the async function to have two parameters.

The rejectWithValue function is a helper function provided by
 redux-toolkit that allows you to return a rejected Promise with a specific
  value. In the provided example, the try block attempts to make a request to
   an API to retrieve all products, and if the request is successful, it returns
    the response data as a resolved Promise. However, if there's an error in
     making the request, the catch block returns a rejected Promise using the 
     rejectWithValue function, passing the error.response.data as the rejection value. This means that if there's an error in making the request, the rejected Promise will contain the error data returned by the API.

By using createAsyncThunk, you can handle asynchronous actions in a more 
efficient way, as it simplifies the process of handling the different stages
 of the asynchronous action (pending, fulfilled, and rejected) and allows you 
 to write more concise and readable code.


 headers
  extraReducers: {
    [getAllProducts.pending]: (state, action) => {
      state.loading = true;
    },
    [getAllProducts.fulfilled]: (state, action) => {
      state.loading = false;
      state.products = action.payload.data;
      state.resultPerPage = action.payload.resultPerPage;
      state.productsCount = action.payload.productsCount;
    },
    [getAllProducts.rejected]: (state, action) => {
      state.loading = false;
      state.error = action.payload.message;
    },
    [singleProduct.pending]: (state, action) => {
      state.loading = true;
    },
    [singleProduct.fulfilled]: (state, action) => {
      state.loading = false;
      state.product = action.payload.data;
    },
    [singleProduct.rejected]: (state, action) => {
      state.loading = false;
      state.error = action.payload.message;
    },
  },


  {loading ? (
            <tr>
              <td colSpan={9} style={{ textAlign: "center" }}>
                <Spinner animation="border" size="sm" />
              </td>
            </tr>
          ) : adminProducts.length > 0 ? (
            adminProducts &&
            adminProducts.map((product, index) => (
              <tr key={product._id}>
                <td>{index + 1}</td>
                <td>
                  <img
                    src={product?.productImg?.url}
                    alt={product?.productName}
                    height={50}
                  />
                </td>
                <td>{product?.productName}</td>
                <td>{product?.category}</td>
                <td>{product?.manufacturer}</td>
                <td>{product?.SKU}</td>
                <td>{product?.ratings}</td>
                <td style={{ color: product?.IsInStock > 0 ? "green" : "red" }}>
                  {product?.IsInStock > 0 ? "Yes" : "Out of stock"}
                </td>
                <td>Rs.{product?.price}</td>
                <td>
                  <Link to={`/admin/dashboard/product/edit/${product._id}`}>
                    <FaPencilAlt />
                  </Link>
                  <Link style={{ color: "red" }}>
                    <FaTrash />
                  </Link>
                  <Link>
                    <FaEye />
                  </Link>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan={9} style={{ textAlign: "center" }}>
                No data found.
              </td>
            </tr>
          )}


          //forgetpassword design
          import React, { useState } from "react";
import { Form } from "react-bootstrap";

const ForgotPassword = () => {
  const [forgotValue, setForgotValue] = useState({
    email: "",
  });

  const { email } = forgotValue;

  const handleChange = (e) => {
    let { name, value } = e.target;
    setForgotValue({ ...forgotValue, [name]: value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
  };

  return (
    <div className=" my-5 d-flex justify-content-center align-items-center">
      <div className="">
        <h2 style={{ color: "#707B8E" }}>Forgot your password?</h2>
        <p style={{ color: "gray" }}>
          Don’t worry! Just fill in your email and we’ll help you <br /> reset
          your password.
        </p>
        <Form onSubmit={handleSubmit} className="mt-4">
          <Form.Group controlId="formBasicEmail">
            <Form.Label>Email address</Form.Label>
            <Form.Control
              type="email"
              name="email"
              placeholder="Enter email"
              value={email}
              onChange={handleChange}
              style={{ outline: "none", boxShadow: "none" }}
            />
            <Form.Text className="text-muted">
              We'll never share your email with anyone else.
            </Form.Text>
          </Form.Group>

          <button
            className="my-1 btn btn-custom form-control"
            style={{ backgroundColor: "#2D3748", color: "white" }}
            type="submit"
          >
            SUBMIT
          </button>
        </Form>
      </div>
    </div>
  );
};

export default ForgotPassword;
